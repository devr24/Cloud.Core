<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cloud.Core</name>
    </assembly>
    <members>
        <member name="M:Newtonsoft.Json.Converters.GenericEnumStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Override of the String Enum Converter to return the default instance of an Enum if null, or an empty string is passed through during Deserialization
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="T:Cloud.Core.Comparer.ObjectReferenceEqualityComparer`1">
            <summary>
            A generic object comparer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/> overrides.
            </summary>
            <typeparam name="T">Object type.</typeparam>
        </member>
        <member name="P:Cloud.Core.Comparer.ObjectReferenceEqualityComparer`1.Default">
            <summary>
            Utility static reference to avoid instantiation all the time.
            </summary>
        </member>
        <member name="M:Cloud.Core.Comparer.ObjectReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T" /> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T" /> to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Cloud.Core.Comparer.ObjectReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="T:Cloud.Core.Exceptions.ConflictException">
            <summary>
            Conflict Exception model.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Cloud.Core.Exceptions.ConflictException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Cloud.Core.Exceptions.ConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Cloud.Core.Exceptions.EntityDisabledException">
            <summary>
            Entity Disabled Exception model.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Cloud.Core.Exceptions.EntityDisabledException.EntityName">
            <summary>
            Gets or sets the name of the entity.
            </summary>
            <value>The name of the entity.</value>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityDisabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityDisabledException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityDisabledException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityDisabledException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityDisabledException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityDisabledException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Cloud.Core.Exceptions.EntityFullException">
            <summary>
            Entity Full Exception model.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Cloud.Core.Exceptions.EntityFullException.EntityName">
            <summary>
            Gets or sets the name of the entity.
            </summary>
            <value>The name of the entity.</value>
        </member>
        <member name="P:Cloud.Core.Exceptions.EntityFullException.MaxSizeBytes">
            <summary>
            Gets or sets the maximum size.
            </summary>
            <value>The maximum size.</value>
        </member>
        <member name="P:Cloud.Core.Exceptions.EntityFullException.CurrentSizeBytes">
            <summary>
            Gets or sets the size of the current.
            </summary>
            <value>The size of the current.</value>
        </member>
        <member name="P:Cloud.Core.Exceptions.EntityFullException.PercentUsed">
            <summary>
            Gets the percent the entity is used.
            </summary>
            <value>The percent used.</value>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityFullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityFullException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityFullException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityFullException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityFullException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityFullException"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityFullException.#ctor(System.String,System.String,System.Int64,System.Int64,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.EntityFullException" /> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="message">The message.</param>
            <param name="currentSizeBytes">The current size bytes.</param>
            <param name="maxSizeBytes">The maximum size bytes.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Cloud.Core.Exceptions.EntityFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Exceptions.ConflictException"/> class.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:Cloud.Core.IAuditLogger">
            <summary>
            Interface for audit logging.
            </summary>
        </member>
        <member name="M:Cloud.Core.IAuditLogger.WriteLog(System.String,System.String)">
            <summary>
            Writes an audit log message (only).  The minimum information that can be logged.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="message">The audit message to log.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IAuditLogger.WriteLog(System.String,System.String,System.String,System.Object)">
            <summary>
            Writes an audit log message with the source and currentValue.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="message">The audit message of the log.</param>
            <param name="source">The source object name that has changed.</param>
            <param name="currentValue">The current value of the object.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IAuditLogger.WriteLog(System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Writes an audit log message, with the source and values (previous/new).
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="message">The audit message to log.</param>
            <param name="source">The source object name that has changed.</param>
            <param name="previousValue">The previous value of the object.</param>
            <param name="currentValue">The current value of the object.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IAuditLogger.WriteLog(System.String,System.String,System.String)">
            <summary>
            Writes an audit log message, capturing the UserIdentifier of the account making the change.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="message">The audit message to log.</param>
            <param name="userIdentifier">The user identifier of the account making the change.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IAuditLogger.WriteLog(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Writes an audit log message with User
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="message">The audit message to log.</param>
            <param name="userIdentifier">The user identifier of the account making the change.</param>
            <param name="source">The source object.</param>
            <param name="currentValue">The current value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IAuditLogger.WriteLog(System.String,System.String,System.String,System.String,System.Object,System.Object)">
            <summary>
            Writes an audit log message with UserIdentifier, source object name, previous and new value of the object.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="message">The audit message to log.</param>
            <param name="userIdentifier">The user identifier of the account making the change.</param>
            <param name="source">The source object.</param>
            <param name="previousValue">The previous value.</param>
            <param name="currentValue">The current value.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.IAuthentication">
            <summary>
            Interface IAuthentication
            </summary>
        </member>
        <member name="P:Cloud.Core.IAuthentication.AccessToken">
            <summary>
            Property to access authentication token
            </summary>
            <value>The access token.</value>
        </member>
        <member name="T:Cloud.Core.IAccessToken">
            <summary>
            Interface IAuthenticated
            </summary>
        </member>
        <member name="P:Cloud.Core.IAccessToken.BearerToken">
            <summary>
            Bearer token generated for authentication.
            </summary>
            <value>The bearer token.</value>
        </member>
        <member name="P:Cloud.Core.IAccessToken.Expires">
            <summary>
            The DateTimeOffset for bearer token expiry.
            </summary>
            <value>The expires.</value>
        </member>
        <member name="P:Cloud.Core.IAccessToken.HasExpired">
            <summary>Gets a value indicating whether this authenticated instance has expired.</summary>
            <value><c>true</c> if this instance has expired; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cloud.Core.IBlobItem">
            <summary>
            Contract of a common BLOB item.
            </summary>
        </member>
        <member name="P:Cloud.Core.IBlobItem.FileExtension">
            <summary>
            Gets the BLOB file extension.
            </summary>
            <value>
            The BLOB file extension.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.FileName">
            <summary>
            Gets the name of the BLOB file.
            </summary>
            <value>
            The name of the BLOB file.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.FileNameWithoutExtension">
            <summary>
            Gets the file name without extension.
            </summary>
            <value>The file name without extension.</value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.Path">
            <summary>
            Gets the full relative path to the BLOB stored.
            </summary>
            <value>
            The path to the BLOB stored.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.FileSize">
            <summary>Gets the size of the file.</summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.ContentHash">
            <summary>Content Hash representing the file content.</summary>
        </member>
        <member name="P:Cloud.Core.IBlobItem.RootFolder">
            <summary>
            Gets the root level parent folder where the BLOB is held.
            </summary>
            <value>
            The root folder name.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.Tag">
            <summary>
            The tag object will hold the concrete class from which the
            specialized version of BLOB item is stored.
            </summary>
            <value>
            The tag object.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.UniqueLeaseName">
            <summary>
            Gets or sets the name of the unique lease.
            </summary>
            <value>
            The name of the unique lease.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.LastWriteTime">
            <summary>
            Gets or sets the Last Write Time of the blob.
            </summary>
            <value>
            The Last Write Time of the file.
            </value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.Properties">
            <summary>
            Gets the properties (metadata) of the blob item.
            </summary>
            <value>The properties to set for the blob item.</value>
        </member>
        <member name="P:Cloud.Core.IBlobItem.Metadata">
            <summary>
            Gets the custom metadata of the blob item
            </summary>
        </member>
        <member name="T:Cloud.Core.IBlobStorage">
            <summary>
            Contract provides functions for BLOB stores.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Cloud.Core.IBlobStorage.ListFolders">
            <summary>
            Lists the root folders from storage.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="!:System.string"/> root folder names.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.GetBlob(System.String,System.Boolean)">
            <summary>Gets the BLOB item (no lock).</summary>
            <param name="blobPath">The BLOB path including name.</param>
            <param name="fetchAttributes">if set to <c>true</c> [will fetch additional attributes].</param>
            <returns>BLOB item found.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.GetBlobWithLock(System.String,System.String)">
            <summary>
            Gets the BLOB with a lock.  This stops the BLOB from being modified whilst locked.
            </summary>
            <param name="blobPath">The path to the BLOB.</param>
            <param name="leaseName">Name of the lease.</param>
            <returns>
              <see cref="T:Cloud.Core.IBlobItem" /> found.
            </returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.Exists(System.String)">
            <summary>
            Check if the specified BLOB exists in storage.
            </summary>
            <param name="blobPath">The BLOB path to check for.</param>
            <returns>Task&lt;System.Boolean&gt; [true] if exists and [false] if not.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.UnlockBlob(Cloud.Core.IBlobItem)">
            <summary>
            Unlocks the BLOB item.
            </summary>
            <param name="item">The BLOB item to unlock.</param>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.ListBlobs(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Lists all BLOB items from storage in the path requested.</summary>
            <param name="rootFolder">The root folder to traverse.</param>
            <param name="recursive">If set to <c>true</c> then [recursively] check subfolders.</param>
            <param name="fetchAttributes">if set to <c>true</c> [will fetch additional attributes].</param>
            <param name="searchPrefix">File name prefix used to filter the search.</param>
            <returns>[System.Collections.IEnumerable] of IBlobItem all BLOB items in the path requested.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.ListBlobsObservable(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Lists the BLOB items from storage, in the path requested, as an observable.
            </summary>
            <param name="rootFolder">The root folder to traverse.</param>
            <param name="recursive">If set to <c>true</c> then [recursively] check subfolders.</param>
            <param name="fetchAttributes">if set to <c>true</c> [will fetch additional attributes].</param>
            <param name="searchPrefix">File name prefix used to filter the search.</param>
            <returns><see cref="T:System.IObservable`1" /> observable for each blob item.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.DownloadBlob(System.String)">
            <summary>
            Downloads the BLOB in the path from storage to a memory stream.
            </summary>
            <param name="blobPath">The BLOB path to download.</param>
            <returns><see cref="T:System.IO.Stream"/> containing the downloaded BLOB.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.DownloadBlob(System.String,System.String)">
            <summary>
            Downloads the BLOB in the path from storage to the local file system.
            </summary>
            <param name="blobPath">The BLOB path to download.</param>
            <param name="filePath">The file path to save to.</param>
            <returns>Async Task</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.DownloadBlob(Cloud.Core.IBlobItem)">
            <summary>
            Downloads the BLOB.
            </summary>
            <param name="blob">The BLOB item to download content for.</param>
            <returns>Memory stream of downloaded blob content.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.UploadBlob(System.String,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Upload the BLOB to storage.  BLOB is read from the passed in stream.
            </summary>
            <param name="blobPath">The BLOB path.</param>
            <param name="stream">The stream.</param>
            <param name="metaData">Dictionary of additional metadata to append to the blob stored.</param>
            <returns>Async Task</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.UploadBlob(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Upload the BLOB to storage.  BLOB is read from the passed in file path.
            </summary>
            <param name="blobPath">The BLOB path.</param>
            <param name="filePath">The file path.</param>
            <param name="metaData">Dictionary of additional metadata to append to the blob stored.</param>
            <returns>Async Task</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.DeleteBlob(System.String)">
            <summary>
            Deletes the BLOB from storage.
            </summary>
            <param name="blobPath">The BLOB path to delete.</param>
            <returns>Async Task</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.RemoveFolder(System.String)">
            <summary>
            Removes the folder at the designated path (and all content within).
            </summary>
            <param name="path">The path to remove.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.AddFolder(System.String)">
            <summary>
            Adds the folder at the designated path.
            </summary>
            <param name="path">The path to add.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.UpdateBlobMetadata(Cloud.Core.IBlobItem)">
            <summary>
            Adds metadata to the BLOB
            </summary>
            <param name="blob">The BLOB path</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.CopyDirectory(System.String,System.String,System.Action{Cloud.Core.TransferEventType,Cloud.Core.ITransferEvent})">
            <summary>
            Copies the content of one directory to another on the server side.
            Avoids having to download all items and reupload them to somewhere else on the client side.
            </summary>
            <param name="sourceDirectoryPath"></param>
            <param name="destinationDirectoryPath"></param>
            <param name="transferEvent"></param>
            <returns>Result from the  server side transfer.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.GetSignedBlobAccessUrl(System.String,Cloud.Core.ISignedAccessConfig)">
            <summary>
            Gets a Signed Access Url to the specified blob with the provided Access Config
            </summary>
            <param name="blobPath">Path to the blob we are requesting access to</param>
            <param name="signedAccessConfig">Access config including required permissions and Access URL Expiry</param>
            <returns>The signed access URL for the specified blob.</returns>
        </member>
        <member name="M:Cloud.Core.IBlobStorage.GetSignedFolderAccessUrl(System.String,Cloud.Core.ISignedAccessConfig)">
            <summary>
            Gets a Signed Access Url to the specified folder with the provided Access Config
            </summary>
            <param name="folderPath">Full Path to the Folder we want to include in the Access URL</param>
            <param name="signedAccessConfig">Access config including required permissions and Access URL Expiry</param>
            <returns>The signed access URL for the specified Folder.</returns>
        </member>
        <member name="T:Cloud.Core.ITransferResult">
            <summary>
             Contract of a common Transfer Result from server side directory transfer.
            </summary>
        </member>
        <member name="P:Cloud.Core.ITransferResult.BytesTransferred">
            <summary>
            Gets the number of bytes that have been transferred.
            </summary>
        </member>
        <member name="P:Cloud.Core.ITransferResult.NumberOfFilesTransferred">
            <summary>
            Gets the number of files that have been transferred.
            </summary>
        </member>
        <member name="P:Cloud.Core.ITransferResult.NumberOfFilesSkipped">
            <summary>
            Gets the number of files that are skipped to be transferred.
            </summary>
        </member>
        <member name="P:Cloud.Core.ITransferResult.NumberOfFilesFailed">
            <summary>
            Gets the number of files that are failed to be transferred.
            </summary>
        </member>
        <member name="T:Cloud.Core.ITransferEvent">
            <summary>
             Contract of a common Transfer Event for server side transfer 
            </summary>
        </member>
        <member name="P:Cloud.Core.ITransferEvent.Source">
            <summary>Gets the instance representation of transfer source location.</summary>
        </member>
        <member name="P:Cloud.Core.ITransferEvent.Destination">
            <summary>Gets the instance representation of transfer destination location.</summary>
        </member>
        <member name="P:Cloud.Core.ITransferEvent.StartTime">
            <summary>Gets transfer start time.</summary>
        </member>
        <member name="P:Cloud.Core.ITransferEvent.EndTime">
            <summary>Gets transfer end time.</summary>
        </member>
        <member name="P:Cloud.Core.ITransferEvent.Exception">
            <summary>Gets the exception if the transfer is failed, or null if the transfer is success.</summary>
        </member>
        <member name="T:Cloud.Core.TransferEventType">
            <summary>
            Type of event that took place.
            </summary>
        </member>
        <member name="F:Cloud.Core.TransferEventType.Failed">
            <summary>Failed the transfer</summary>
        </member>
        <member name="F:Cloud.Core.TransferEventType.Transferred">
            <summary>Tranferred successfully</summary>
        </member>
        <member name="F:Cloud.Core.TransferEventType.Skipped">
            <summary>Skipped the transfer</summary>
        </member>
        <member name="T:Cloud.Core.IEntityConfig">
            <summary>
            A config with the necessary info on what should be done during entity creation/deletion etc.
            </summary>
        </member>
        <member name="P:Cloud.Core.IEntityConfig.EntityName">
            <summary>
            Gets or sets the name of the entity that will be created.
            </summary>
            <value>
            The name of the entity.
            </value>
        </member>
        <member name="T:Cloud.Core.IIdentityProvider">
            <summary>
            Contract provides functions for Identity Providers.
            </summary>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetUsers(System.Boolean)">
            <summary>
            Lists the users.
            </summary>
            <param name="includeMemberOf">Optional parameter to populate the <see cref="P:Cloud.Core.IIdentity.MemberOf"/> field, will make the method call take longer.</param>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:Cloud.Core.IIdentity"/> of type <see cref="T:Cloud.Core.IdentityType"/> "User".</returns>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetGroups(System.Boolean)">
            <summary>
            Lists the groups.
            </summary>
            <param name="includeMemberOf">Optional parameter to populate the <see cref="P:Cloud.Core.IIdentity.MemberOf"/> field, will make the method call take longer.</param>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:Cloud.Core.IIdentity"/> of type <see cref="T:Cloud.Core.IdentityType"/> "Group".</returns>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetIdentities(System.Boolean)">
            <summary>
            Lists the identities.
            </summary>
            <param name="includeMemberOf">Optional parameter to populate the <see cref="P:Cloud.Core.IIdentity.MemberOf"/> field, will make the method call take longer.</param>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:Cloud.Core.IIdentity"/>.</returns>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Returns the User identity that matches the Id.
            </summary>
            <param name="id">The Id of the User identity.</param>
            <param name="includeMemberOf">Optional parameter to populate the <see cref="P:Cloud.Core.IIdentity.MemberOf"/> field, will make the method call take longer.</param>
            <returns><see cref="T:Cloud.Core.IIdentity"/> of type <see cref="T:Cloud.Core.IdentityType"/> "User" that matches the Id.</returns>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetGroup(System.String,System.Boolean)">
            <summary>
            Returns the Group identity that matches the Id.
            </summary>
            <param name="id">The Id of the Group identity.</param>
            <param name="includeMemberOf">Optional parameter to populate the <see cref="P:Cloud.Core.IIdentity.MemberOf"/> field, will make the method call take longer.</param>
            <returns><see cref="T:Cloud.Core.IIdentity"/> of type <see cref="T:Cloud.Core.IdentityType"/> "Group" that matches the Id.</returns>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetIdentity(System.String,System.Boolean)">
            <summary>
            Returns the identity that matches the Id.
            </summary>
            <param name="id">The Id of the identity.</param>
            <param name="includeMemberOf">Optional parameter to populate the <see cref="P:Cloud.Core.IIdentity.MemberOf"/> field, will make the method call take longer.</param>
            <returns><see cref="T:Cloud.Core.IIdentity"/> that matches the Id.</returns>
        </member>
        <member name="M:Cloud.Core.IIdentityProvider.GetUsersGroupMemberships(System.String)">
            <summary>
            Returns a list of Groups that the User matching the input Id is a member of.
            </summary>
            <param name="id">The Id of the User identity.</param>
            <returns><see cref="T:System.Collections.IEnumerable"/> of <see cref="T:Cloud.Core.IIdentity"/> of type <see cref="T:Cloud.Core.IdentityType"/> "Group" that the matching User is a member of.</returns>
        </member>
        <member name="T:Cloud.Core.IIdentity">
            <summary>
            Contract of a common Identity item.
            </summary>
        </member>
        <member name="P:Cloud.Core.IIdentity.Id">
            <summary>
            Gets the Id of the Identity.
            </summary>
            <value>
            The Id of the Identity.
            </value>
        </member>
        <member name="P:Cloud.Core.IIdentity.DisplayName">
            <summary>
            Gets the Display Name of the Identity.
            </summary>
            <value>
            The Display Name of the Identity.
            </value>
        </member>
        <member name="P:Cloud.Core.IIdentity.Type">
            <summary>
            Gets the Type of Identity.
            </summary>
            <value>
            The Type of Identity.
            </value>
        </member>
        <member name="P:Cloud.Core.IIdentity.Email">
            <summary>
            Gets the Email address of the Identity.
            </summary>
            <value>
            The Email address of the Identity.
            </value>
        </member>
        <member name="P:Cloud.Core.IIdentity.MemberOf">
            <summary>
            Gets the MemberOf Id collection of the Identity.
            </summary>
            <value>
            Collection of Identity Ids that the Identity is a member of.
            </value>
        </member>
        <member name="T:Cloud.Core.IdentityType">
            <summary>
            The possible types for an IIdentity.
            </summary>
        </member>
        <member name="T:Cloud.Core.IMessageOperations">
            <summary>
            Contract specifying the functionality of message operations like "Complete" and "Abandon".
            </summary>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.ReceiveOne``1">
            <summary>
            Gets a single message of type T.
            </summary>
            <typeparam name="T">The type of the message returned.</typeparam>
            <returns>The typed T.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.ReceiveOneEntity``1">
            <summary>
            Gets a single message with IMessageEntity wrapper.
            </summary>
            <typeparam name="T">Type of message entity body.</typeparam>
            <returns>IMessageEntity wrapper with body and properties.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.ReadProperties``1(``0)">
            <summary>
            Read additional properties from a message.
            </summary>
            <typeparam name="T">Type T of message.</typeparam>
            <param name="msg">Message body, used to identity the message to read from.</param>
            <returns>Dictionary of string, object properties.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.Complete``1(``0)">
            <summary>
            Completes the message and removes from the queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message we want to complete.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task" /> wrapper</returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.Complete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Completes a list of messages.
            </summary>
            <typeparam name="T">Type of messages to complete</typeparam>
            <param name="message">The message list.</param>
            <returns></returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.Abandon``1(``0)">
            <summary>
            Abandons a message by returning it to the queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message we want to abandon.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task" /> wrapper.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.Error``1(``0,System.String)">
            <summary>
            Errors a message by moving it specifically to the error queue (dead-letter).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message that we want to move to the error queue.</param>
            <param name="reason">(optional) The reason for erroring the message.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task" /> wrapper</returns>
        </member>
        <member name="M:Cloud.Core.IMessageOperations.GetSignedAccessUrl(Cloud.Core.ISignedAccessConfig)">
            <summary>
            Gets a signed access URL to the current messenger.
            </summary>
            <param name="accessConfig">Access config including required permissions and Access URL Expiry.</param>
            <returns>The signed access URL for the specified messenger.</returns>
        </member>
        <member name="T:Cloud.Core.IMessageEntityManager">
            <summary>
            Interface IMessageEntityManager - used for managing message entities.
            Extend this interface to add new manager orientated methods such as create or delete entities to read or send to.
            </summary>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.GetReceiverEntityUsagePercentage">
            <summary>
            Gets the receiver entity usage percentage. 1.0 represents 100%.
            </summary>
            <returns>Task&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.GetSenderEntityUsagePercentage">
            <summary>
            Gets the sender entity usage percentage. 1.0 represents 100%.
            </summary>
            <returns>Task&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.IsReceiverEntityDisabled">
            <summary>
            Determines whether [receiver entity is disabled].
            </summary>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.IsSenderEntityDisabled">
            <summary>
            Determines whether [sender entity is disabled].
            </summary>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.GetReceiverMessageCount">
            <summary>
            Gets the receiver active and errored message count.
            </summary>
            <returns>Task&lt;EntityMessageCount&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.GetSenderMessageCount">
            <summary>
            Gets the sender active and errored message count.
            </summary>
            <returns>Task&lt;EntityMessageCount&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.CreateEntity(Cloud.Core.IEntityConfig)">
            <summary>
            Creates the entity.
            </summary>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.EntityExists(System.String)">
            <summary>
            Check if the entity exists.
            </summary>
            <param name="entityName">Name of the entity to check exists.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.IMessageEntityManager.DeleteEntity(System.String)">
            <summary>
            Deletes the entity.
            </summary>
            <param name="entityName">Name of the entity to delete.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.EntityMessageCount">
            <summary>
            Model containing active and error message counters.
            </summary>
        </member>
        <member name="P:Cloud.Core.EntityMessageCount.ErroredEntityCount">
            <summary>
            Gets or sets the entity errored message count.
            </summary>
            <value>The errored message count.</value>
        </member>
        <member name="P:Cloud.Core.EntityMessageCount.ActiveEntityCount">
            <summary>
            Gets or sets the entity active message count.
            </summary>
            <value>The active message count.</value>
        </member>
        <member name="T:Cloud.Core.ISendMessages">
            <summary>
            Contract that provides a simple way to send messages.
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Cloud.Core.ISendMessages.Send``1(``0,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Send a message.
            </summary>
            <typeparam name="T">The type of the message that we are sending.</typeparam>
            <param name="message">The message body that we are sending.</param>
            <param name="properties">Any additional message properties to add.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task" /> wrapper</returns>
        </member>
        <member name="M:Cloud.Core.ISendMessages.SendBatch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Send a batch of messages.
            </summary>
            <typeparam name="T">The type of the message that we are sending.</typeparam>
            <param name="messages">IEnumerable of messages to send.</param>
            <param name="batchSize">Size of the message batch to send.</param>
            <returns>The async <see cref="T:System.Threading.Tasks.Task" /> wrapper.</returns>
        </member>
        <member name="M:Cloud.Core.ISendMessages.SendBatch``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Sends the batch with properties.
            </summary>
            <typeparam name="T">The type of the message that we are sending.</typeparam>
            <param name="messages">The messages to send.</param>
            <param name="properties">The properties to associate with ALL messages.</param>
            <param name="batchSize">Size of each batch.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.ISendMessages.SendBatch``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{System.String,System.Object}[]},System.Int32)">
            <summary>
            Sends the batch with a function to set the properties based on the message.
            </summary>
            <typeparam name="T">The type of the message that we are sending.</typeparam>
            <param name="messages">The messages to send.</param>
            <param name="setProps">The function to set props for each message.</param>
            <param name="batchSize">Size of each batch.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.IMessenger">
            <summary>
            Contract that provides a simple way to receive messages through callbacks.
            Implements the <see cref="T:Cloud.Core.ISendMessages" />
            Implements the <see cref="T:Cloud.Core.IMessageOperations" />
            </summary>
            <seealso cref="T:Cloud.Core.ISendMessages" />
            <seealso cref="T:Cloud.Core.IMessageOperations" />
        </member>
        <member name="P:Cloud.Core.IMessenger.EntityManager">
            <summary>
            Gets the messaging entity manager.
            </summary>
            <value>The entity manager.</value>
            <seealso cref="T:Cloud.Core.IMessageEntityManager" />
        </member>
        <member name="M:Cloud.Core.IMessenger.Receive``1(System.Action{``0},System.Action{System.Exception},System.Int32)">
            <summary>
            Sets up a call back for receiving any message of type <typeparamref name="T" />.
            If you try to setup more then one callback to the same message type <typeparamref name="T" /> you'll get an <see cref="T:System.InvalidOperationException" />.
            </summary>
            <typeparam name="T">The type of the message that we are subscribing to.</typeparam>
            <param name="successCallback">The <see cref="T:System.Action`1" /> delegate that will be called for each message received.</param>
            <param name="errorCallback">The <see cref="T:System.Action`1" /> delegate that will be called when an error occurs.</param>
            <param name="batchSize">The size of the batch when reading for a queue.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when you attempt to setup multiple callbacks against the same <typeparamref name="T" /> parameter.</exception>
        </member>
        <member name="M:Cloud.Core.IMessenger.CancelReceive``1">
            <summary>
            Stop receiving a message type.
            </summary>
            <typeparam name="T">The type of the message that we are cancelling the receive on.</typeparam>
        </member>
        <member name="T:Cloud.Core.IReactiveMessenger">
            <summary>
            Contract that allows a reactive way to receive messages.
            Implements the <see cref="T:Cloud.Core.ISendMessages" />
            Implements the <see cref="T:Cloud.Core.IMessageOperations" />
            </summary>
            <seealso cref="T:Cloud.Core.ISendMessages" />
            <seealso cref="T:Cloud.Core.IMessageOperations" />
        </member>
        <member name="P:Cloud.Core.IReactiveMessenger.EntityManager">
            <summary>
            Gets the entity manager.
            </summary>
            <value>The entity manager.</value>
        </member>
        <member name="M:Cloud.Core.IReactiveMessenger.StartReceive``1(System.Int32)">
            <summary>
            Set up the required receive pipeline, for the given message type, and return a reactive <see cref="T:System.IObservable`1" /> that you can subscribe to.
            </summary>
            <typeparam name="T">The type of the message returned by the observable.</typeparam>
            <param name="batchSize">The size of the batch when reading from a queue.</param>
            <returns>The typed <see cref="T:System.IObservable`1" /> that you subscribed to.</returns>
        </member>
        <member name="M:Cloud.Core.IReactiveMessenger.CancelReceive``1">
            <summary>
            Stop receiving a message type.
            </summary>
            <typeparam name="T">The type of the message that we are cancelling the receive on.</typeparam>
        </member>
        <member name="M:Cloud.Core.IReactiveMessenger.UpdateReceiver(System.String,System.String,System.Boolean,System.Nullable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
             Update the receiver details
            </summary>
            <param name="entityName">The name of the entity to listen to</param>
            <param name="entitySubscriptionName">The name of the subscription on the entity to listen to</param>
            <param name="createIfNotExists">The resource will be created if it does not exist</param>
            <param name="entityFilter">A filter that will be applied to the entity if created through this method</param>
            <param name="supportStringBodyType">Allow messages sent as strings to be read</param>
            <returns></returns>
        </member>
        <member name="T:Cloud.Core.IMessageEntity`1">
            <summary>
            Message wrapper entity, that has a body and list of properties.
            </summary>
            <typeparam name="T">Type of message entity body.</typeparam>
        </member>
        <member name="P:Cloud.Core.IMessageEntity`1.Body">
            <summary>
            Entity message body.
            </summary>
        </member>
        <member name="P:Cloud.Core.IMessageEntity`1.Properties">
            <summary>
            Collection of properties for the entity message.
            </summary>
        </member>
        <member name="M:Cloud.Core.IMessageEntity`1.GetPropertiesTyped``1">
            <summary>
            Gets the message properties as a concrete type.
            </summary>
            <typeparam name="O">Type of object to return when mapping the properties.</typeparam>
            <returns>Concrete type TO, representing the message.</returns>
        </member>
        <member name="T:Cloud.Core.INamedInstance">
            <summary>
            Contract for a Named Instance implementation.  Enables support for the Named Instance Factory.
            </summary>
        </member>
        <member name="T:Cloud.Core.NamedInstanceFactory`1">
            <summary>
            Factory for getting instances of type T (where T is constrained to INamedInstance type).
            </summary>
            <typeparam name="T">Type T of a class that implemented INamedInstance.</typeparam>
        </member>
        <member name="T:Cloud.Core.ISecureVault">
            <summary>
            Contract specifying the functionality of a Secure Vault.
            Kept to Get and Set accessors for secrets for simplicity.
            </summary>
        </member>
        <member name="M:Cloud.Core.ISecureVault.SetSecret(System.String,System.String)">
            <summary>
            Sets the secret in the secret vault implementation.
            </summary>
            <param name="secretName">Name of the secret to set.</param>
            <param name="secretValue">The value for the secret.</param>
            <returns></returns>
        </member>
        <member name="M:Cloud.Core.ISecureVault.GetSecret(System.String)">
            <summary>
            Gets the secret from the secret vault implementation.
            </summary>
            <param name="secretName">Name of the secret to retrieve.</param>
            <returns></returns>
        </member>
        <member name="T:Cloud.Core.ISignedAccessConfig">
            <summary>
            Class containing Access Config, permissions required and Access Expiry
            </summary>
        </member>
        <member name="P:Cloud.Core.ISignedAccessConfig.AccessPermissions">
            <summary>
            List of permissions required for Access URL
            </summary>
        </member>
        <member name="P:Cloud.Core.ISignedAccessConfig.AccessExpiry">
            <summary>
            Expiry time of the Access URL
            </summary>
        </member>
        <member name="T:Cloud.Core.SignedAccessConfig">
            <summary>
            Class to allow us to pass permission and expiry properties to Blob Storage to retrieve Access Url
            </summary>
        </member>
        <member name="P:Cloud.Core.SignedAccessConfig.AccessPermissions">
            <summary>
            List of Permissions the Access URL should have
            </summary>
        </member>
        <member name="P:Cloud.Core.SignedAccessConfig.AccessExpiry">
            <summary>
            Required Expiry for the Access URL
            </summary>
        </member>
        <member name="M:Cloud.Core.SignedAccessConfig.#ctor(System.Collections.Generic.List{Cloud.Core.AccessPermission},System.DateTimeOffset)">
            <summary>
            Instaniate a new instance of the SignedAccessConfig with the supplied parameters
            </summary>
            <param name="accessPermissions">Permissions requested for the Access URL</param>
            <param name="accessExpiry">Expiry for the Access URL</param>
        </member>
        <member name="T:Cloud.Core.AccessPermission">
            <summary>
            List of available permissions for accessing items within Storage.
            </summary>
        </member>
        <member name="T:Cloud.Core.IStateStorageProvider`1">
            <summary>
            Interface for IStateStorageProvider, used to hook up state storage with the passed in provider.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Cloud.Core.IStateStorageProvider`1.StateStorageProvider">
            <summary>
            Gets or sets a single state storage provider.
            </summary>
            <value>The state storage provider.</value>
        </member>
        <member name="T:Cloud.Core.IStateStorage">
            <summary>
            Interface for State Storage. For any store to be considered as state stoage they need to
            implement these methods.
            </summary>
        </member>
        <member name="M:Cloud.Core.IStateStorage.GetState``1(System.String)">
            <summary>
            Gets the generic state information from storage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns>Task&lt;T&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IStateStorage.IsStateStored(System.String)">
            <summary>
            Determines whether [is state stored] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Cloud.Core.IStateStorage.SetState``1(System.String,``0)">
            <summary>
            Sets the generic object in state storage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="storeObj">The store object.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.ITableStorage">
            <summary>
            Contract provides functions for table stores.
            Implements the <see cref="T:Cloud.Core.IStateStorage" /> interface, making the implementors of this interface eligable
            to be used as state storage mechanisms.
            </summary>
            <seealso cref="T:Cloud.Core.IStateStorage" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Cloud.Core.ITableStorage.GetEntity``1(System.String,System.String)">
            <summary>
            Gets the data table entity.
            </summary>
            <typeparam name="T">Type of entity being returned.</typeparam>
            <param name="tableName">Name of the table within the store.</param>
            <param name="key">The key to find the individual record.</param>
            <returns><see cref="T:System.Threading.Tasks.Task`1" /> with object found.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.Exists(System.String,System.String)">
            <summary>
            Checks to see if a data entity with the key exists for the specified table name.
            </summary>
            <param name="tableName">Name of the table to query.</param>
            <param name="key">The key to identity the record being searched for.</param>
            <returns><see cref="T:System.Threading.Tasks.Task" /> of <see cref="T:System.Boolean" /> where [true] means the record exists and [false] shows it does not.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.DeleteEntity(System.String,System.String)">
            <summary>
            Deletes the entity for the table store.
            </summary>
            <param name="tableName">Name of the table to query.</param>
            <param name="key">The key to find the record for deletion.</param>
            <returns><see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.DeleteEntities(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Deletes multiple entities.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="keys">The keys for deletion.</param>
            <param name="batchSize">Size of the batch (defaults to 10).</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.UpsertEntity``1(System.String,``0)">
            <summary>
            Upserts (adds if does not exist or updates if already exists) the entity.
            </summary>
            <typeparam name="T">Type of data entity being updated.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="data">The data to store.</param>
            <returns><see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.UpsertEntities``1(System.String,System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Upserts multiple entities.
            </summary>
            <typeparam name="T">List of entities to insert or update.</typeparam>
            <param name="tableName">Name of the table the items will be added to.</param>
            <param name="data">The data.</param>
            <param name="batchSize">Size of the batch (defaults to 10).</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntities``1(System.String,System.Collections.Generic.List{System.String},System.String,System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Enumerable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="selectColumns">The columns to select (if required).</param>
            <param name="filterQuery">The query to execute.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntities``1(System.String,System.Collections.Generic.List{System.String},System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Enumerable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="selectColumns">The columns to select (if required).</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntities``1(System.String,System.String,System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Enumerable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="filterQuery">The query to execute.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntities``1(System.String,System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Enumerable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntitiesObservable``1(System.String,System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Enumerable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntitiesObservable``1(System.String,System.String,System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Observable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="filterQuery">The query to execute.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntitiesObservable``1(System.String,System.Collections.Generic.List{System.String},System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Observable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="selectColumns">The columns to select (if required).</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListEntitiesObservable``1(System.String,System.Collections.Generic.List{System.String},System.String,System.Threading.CancellationTokenSource)">
            <summary>
            List the entities of a given table name, with a supplied query.  Results returned as an Observable.
            </summary>
            <typeparam name="T">Type of object returned in the Enumerable.</typeparam>
            <param name="tableName">Name of the table to search within.</param>
            <param name="selectColumns">The columns to select (if required).</param>
            <param name="filterQuery">The query to execute.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Returns enumerable list.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.ListTableNames">
            <summary>
            List all the table names in the storage account. Results returned as an Enumerable.
            </summary>
            <returns>Returns string list of table names.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.CountItemsQuery(System.String,System.String,System.Threading.CancellationTokenSource)">
            <summary>
            Count items from a table filtering by query.
            </summary>
            <param name="tableName">Name of the table to count items from.</param>
            <param name="query">The query to execute.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Number of items found.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.CountItems(System.String,System.String,System.Threading.CancellationTokenSource)">
            <summary>
            Count items in a table, filtering by key.
            </summary>
            <param name="tableName">Name of the table to count items from.</param>
            <param name="key">Specific key to find</param>
            <param name="token">Cancellation token source.</param>
            <returns>Number of items found.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.CountItems(System.String,System.Threading.CancellationTokenSource)">
            <summary>
            Count items in a table.
            </summary>
            <param name="tableName">Name of the table to count items from.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Number of items found.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.CountItems(System.String,System.Action{System.Int64},System.Threading.CancellationTokenSource)">
            <summary>
            Count items in a table, intercept the increment event.
            </summary>
            <param name="tableName">Name of the table to count items from.</param>
            <param name="countIncrement">Action, called every time an increment happens.</param>
            <param name="token">Cancellation token source.</param>
            <returns>Number of items found.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.DeleteTable(System.String)">
            <summary>
            Deletes the table from the storage account.
            </summary>
            <param name="tableName">The name of the table to be deleted.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Cloud.Core.ITableStorage.CreateTable(System.String)">
            <summary>
            Creates a table in the storage account.
            </summary>
            <param name="tableName">The name of the table to be created.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Cloud.Core.ITableItem">
            <summary>
            Interface ITableItem is used to ensure generic items passed in and out have at least got a key property.
            </summary>
        </member>
        <member name="P:Cloud.Core.ITableItem.Key">
            <summary>
            Gets or sets the identifier key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Cloud.Core.ITelemetryLogger`1">
            <summary>
            Interface ITelemetryLogger with type
            Implements the <see cref="T:Cloud.Core.ITelemetryLogger" />
            </summary>
            <typeparam name="T">Type of TelemetryLogger.</typeparam>
            <seealso cref="T:Cloud.Core.ITelemetryLogger" />
        </member>
        <member name="T:Cloud.Core.ITelemetryLogger">
            <summary>
            Contract for all implementations of the logger.  
            </summary>
            <seealso cref="T:Microsoft.Extensions.Logging.ILogger" />
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogVerbose(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs verbose messages.
            </summary>
            <param name="message">The message to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogInformation(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs information messages.
            </summary>
            <param name="message">The message to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogCritical(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs critical messages.
            </summary>
            <param name="message">The message to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogCritical(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs critical message.
            </summary>
            <param name="ex">The exception to log as critical.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogWarning(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs warning message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogWarning(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs warning message.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogError(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs error message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogError(System.Exception,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs exception message.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="properties">The properties to output.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogError(System.Exception,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs error message
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="message">The message to log.</param>
            <param name="properties">The properties to concatenate together and add to the message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogMetric(System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Int32)">
            <summary>
            Logs the metric value.
            </summary>
            <param name="metricName">Name of the metric to log.</param>
            <param name="metricValue">The metric value.</param>
            <param name="properties">The properties to output.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.LogMetric(System.String,System.Double,System.String,System.String,System.Int32)">
            <summary>
            Logs the metric value.
            </summary>
            <param name="metricName">Name of the metric to log.</param>
            <param name="metricValue">The metric value.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Cloud.Core.ITelemetryLogger.Flush">
            <summary>
            Flush the logs to the sink.
            </summary>
        </member>
        <member name="T:Cloud.Core.Validation.AttributeValidator">
            <summary>
            Class AttributeValidator - use this when model validation will be used in the inheriting class.
            </summary>
        </member>
        <member name="M:Cloud.Core.Validation.AttributeValidator.Validate(System.IServiceProvider)">
            <summary>
            Returns validate result this instance. All properties in the inheriting class will be validated.  Decorate 
            them using DataAnnotations, such as "Required" or "MaxLength".
            </summary>
            <param name="serviceProvider">Existing service provider - typically used to resolve IStringLocalizer.</param>
            <returns>ValidateResult representing the valid state of the inheriting object.</returns>
        </member>
        <member name="T:Cloud.Core.Validation.ValidateResult">
            <summary>
            Class ValidateResult.
            </summary>
        </member>
        <member name="M:Cloud.Core.Validation.ValidateResult.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Cloud.Core.Validation.ValidateResult"/> class.
            </summary>
            <param name="errors">The error collection.</param>
        </member>
        <member name="P:Cloud.Core.Validation.ValidateResult.IsValid">
            <summary>
            Returns true if there are no errors.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cloud.Core.Validation.ValidateResult.Errors">
            <summary>
            Gets the error collection.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="T:Cloud.Core.Web.ApiService">
            <summary>
            Http Api Service is a wrapper for the HttpClient class.  It handles common HttpClient use cases, such as deserializing json responses.
            </summary>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.#ctor">
            <summary>
            Service that performs http requests using the provided authentication.
            </summary>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.#ctor(System.Net.Http.IHttpClientFactory,Cloud.Core.IAuthentication)">
            <summary>
            Service that performs http requests using the provided authentication.  This constructor can be used with Dependency Injection.
            </summary>
            <param name="clientFactory">Client factory to get the http client from.</param>
            <param name="authentication">Authentication provider for http client.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.#ctor(System.Net.Http.IHttpClientFactory)">
            <summary>
            Service that performs http requests using the provided authentication.  This constructor can be used with Dependency Injection.
            </summary>
            <param name="clientFactory">Client factory to get the http client from.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.#ctor(System.String)">
            <summary>
            Service that performs http requests using the provided authentication.  This constructor can be used with Dependency Injection.
            </summary>
            <param name="authToken">Bearer token to access the API being called.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.#ctor(Cloud.Core.IAuthentication)">
            <summary>
            Service that performs http requests using the provided authentication.  This constructor can be used with Dependency Injection.
            </summary>
            <param name="authentication">Authentication provider for http client.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Get``1(System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a GET request.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of GET request.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a GET request.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of GET request.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Post``1(System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a POST request
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of POST request.</param>
            <param name="content">Content of the POST body.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Post``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a POST request
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of POST request.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="content">Content of the POST body.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.PostMultipart``1(System.String,System.Net.Http.MultipartFormDataContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a POST but with multipart form data.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of POST multipart request.</param>
            <param name="payload">Mutli-part form data.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.PostMultipart``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.MultipartFormDataContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a POST but with multipart form data.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of POST multipart request.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="payload">Mutli-part form data.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Put``1(System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a PUT request.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of PUT request.</param>
            <param name="content">Content of the POST body</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Put``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a PUT request.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of PUT request.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="content">Content of the POST body</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Delete``1(System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a DELETE request.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of DELETE request.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a DELETE request.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="url">Url of DELETE request.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="unsuccessfulAction">Custom action to perform if request if not successful.</param>
            <returns>Async Task with generic object type T.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.ExecuteRequestTyped``1(System.Net.Http.HttpMethod,System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and attempts to deserialize the content to an object.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Deserialized content as object T.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Request to url: {url} failed, Response: {JsonConvert.SerializeObject(response)}</exception>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.ExecuteRequestTyped``1(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and attempts to deserialize the content to an object.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="content">The content.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Deserialized content as object T.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Request to url: {url} failed, Response: {JsonConvert.SerializeObject(response)}</exception>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.ExecuteRequestTyped``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and attempts to deserialize the content to an object.
            </summary>
            <typeparam name="T">Type T object to be returned.</typeparam>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="content">The content.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Deserialized content as object T.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Request to url: {url} failed, Response: {JsonConvert.SerializeObject(response)}</exception>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.ExecuteRequest(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the response.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="content">The content.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>HttpResponseMessage with the web response from the request.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Request to url: {url} failed, Response: {JsonConvert.SerializeObject(response)}</exception>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.ExecuteRequest(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the response.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="content">The content.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>HttpResponseMessage with the web response from the request.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Request to url: {url} failed, Response: {JsonConvert.SerializeObject(response)}</exception>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.ExecuteRequest(System.Net.Http.HttpMethod,System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the response.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>HttpResponseMessage with the web response from the request.</returns>
            <exception cref="T:System.Net.Http.HttpRequestException">Request to url: {url} failed, Response: {JsonConvert.SerializeObject(response)}</exception>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.SetAuthToken(System.String)">
            <summary>
            Update the auth token to use the token passed in.
            </summary>
            <param name="token">String bearer token.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.SetAuthToken(Cloud.Core.IAuthentication)">
            <summary>
            Update the authentication token to the IAuthentication passed in.
            </summary>
            <param name="auth">IAuthentication provider.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Execute(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage},System.Boolean)">
            <summary>
            Internal execute http client request method, called by the public api methods.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="headers">Dictionary of headers to append onto the request.</param>
            <param name="content">The content.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <param name="jsonCall">Whether or not the response expected will be serialised to json - this effects the headers setup.</param>
            <returns>Http response message.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.SetupRequestHeaders(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Setup request headers by clearing down any existing headers and adding the newly passed in headers collection.
            If headers is passed in as null, it will default to use one header only for the Accept header.
            Authentication header is also appended here.
            </summary>
            <param name="headers">Dictionary of headers to add to the request.</param>
            <param name="isJsonCall">Whether or not the http call response will be serialized to json - important, as we append the Accept:application/json; header onto the request automatically.</param>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.TryGetAccessToken(System.String@)">
            <summary>
            Try to get an access token.
            </summary>
            <param name="token">Out param which is the generated token (if one was requested).</param>
            <returns>True if got an access token and false if not.</returns>
        </member>
        <member name="M:Cloud.Core.Web.ApiService.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Cloud.Core.Web.IApiService">
            <summary>
            Interface for API Service
            </summary>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Get``1(System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a GET request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of GET request.</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a GET request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of GET request.</param>
            <param name="headers">List of headers to set on the request.</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Post``1(System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a POST request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of POST request.</param>
            <param name="content">Content of the POST body.</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Post``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a POST request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of POST request.</param>
            <param name="headers">List of headers to set on the request.</param>
            <param name="content">Content of the POST body.</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Put``1(System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a PUT request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of PUT request</param>
            <param name="content">Content of the PUT body</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Put``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a PUT request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of PUT request</param>
            <param name="headers">List of headers to set on the request.</param>
            <param name="content">Content of the PUT body</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Delete``1(System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a DELETE request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of DELETE request.</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Performs a DELETE request.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="url">Url of DELETE request.</param>
            <param name="headers">List of headers to set on the request.</param>
            <param name="unsuccsessfulAction">Custom action to perform if request is not successful.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.ExecuteRequestTyped``1(System.Net.Http.HttpMethod,System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the typed response body.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.ExecuteRequestTyped``1(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the typed response body.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="content">The content to send with the request.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.ExecuteRequestTyped``1(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the typed response body.
            </summary>
            <typeparam name="T">The object returned from the response.</typeparam>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="headers">List of headers to set on the request.</param>
            <param name="content">The content to send with the request.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Async take with type T object.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.ExecuteRequest(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="headers">List of headers to set on the request.</param>
            <param name="content">The content to send with the request.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Async take with HttpResponseMessage.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.ExecuteRequest(System.Net.Http.HttpMethod,System.String,System.Net.Http.HttpContent,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the response.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="content">The content to send with the request.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Async take with HttpResponseMessage.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.ExecuteRequest(System.Net.Http.HttpMethod,System.String,System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Executes the request and returns the response.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="unsuccessfulAction">The unsuccessful action.</param>
            <returns>Async take with HttpResponseMessage.</returns>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.SetAuthToken(System.String)">
            <summary>
            Update the auth token to use the token passed in.
            </summary>
            <param name="token">String bearer token.</param>
        </member>
        <member name="M:Cloud.Core.Web.IApiService.SetAuthToken(Cloud.Core.IAuthentication)">
            <summary>
            Update the authentication token to the IAuthentication passed in.
            </summary>
            <param name="auth">IAuthentication provider.</param>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Contains extensions to <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Allows an existing dictionary the capability of adding a range of existing keyvalue pairs.
            </summary>
            <typeparam name="T">Source dictionary to add to.</typeparam>
            <typeparam name="O">Range dictionary to take items from and append to source.</typeparam>
            <param name="source">The source to append to.</param>
            <param name="range">The range to take from.</param>
            <returns>Dictionary&lt;T, O&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Append a KeyValuePair array to the source dictionary.
            </summary>
            <typeparam name="T">Source dictionary to add to.</typeparam>
            <typeparam name="O">Range KeyValuePair array to take items from and append to source.</typeparam>
            <param name="source">The source.</param>
            <param name="range">The range.</param>
            <returns>Dictionary&lt;T, O&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.Release``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Releases a <see cref="T:System.Collections.Generic.IDictionary`2"/> where <typeparamref name="TValue"/> implements <see cref="T:System.IDisposable"/> by calling
            Dispose() on all it's values and then clearing it.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.Generic.IDictionary`2"/> that we want to release.</param>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ToDelimitedString(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Returns a <see cref="T:System.String" /> that represents this instance.</summary>
            <param name="collection">The collection to concatenate.</param>
            <param name="delimiter">Delimiter to join the values with.  Defaults to ";".</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary to object of type T.
            </summary>
            <typeparam name="T">Target type to convert to.</typeparam>
            <param name="source">Source dictionary to convert into generic object type.</param>
            <returns>Type T object.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AsDictionary(System.Object,System.Reflection.BindingFlags)">
            <summary>
            Converts object to IDictionary{string,object}.
            </summary>
            <param name="source">Source object to convert.</param>
            <param name="bindingAttr">Types of attributes to bind (if need to be specific).</param>
            <returns>IDictionary object representing the object passed in.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ToList``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Convert a dictionary to a list of key value pairs.
            </summary>
            <typeparam name="T">Key type.</typeparam>
            <typeparam name="J">Value type.</typeparam>
            <param name="source">Source dictionary to convert.</param>
            <returns>List of key value pairs representing the dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ToArray``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Convert a dictionary to an array of key value pairs.
            </summary>
            <typeparam name="T">Key type.</typeparam>
            <typeparam name="J">Value type.</typeparam>
            <param name="source">Source dictionary to convert.</param>
            <returns>List of key value pairs representing the dictionary.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Either add a new item, or if it already exists, update it.
            </summary>
            <typeparam name="T">Key type.</typeparam>
            <typeparam name="J">Value type.</typeparam>
            <param name="source">Source dictionary to add/update.</param>
            <param name="key">Key for the element.</param>
            <param name="value">Value for the element.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Either add a new item, or if it already exists, update it.
            </summary>
            <typeparam name="T">Key type.</typeparam>
            <typeparam name="J">Value type.</typeparam>
            <param name="source">The source.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>IDictionary&lt;T, J&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Either add a new item, or if it already exists, update it.
            </summary>
            <typeparam name="T">Key type.</typeparam>
            <typeparam name="J">Value type.</typeparam>
            <param name="source">The source.</param>
            <param name="prop">The property.</param>
            <returns>IDictionary&lt;T, J&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Either add a new item, or if it already exists, update it.
            </summary>
            <typeparam name="T">Key type.</typeparam>
            <typeparam name="J">Value type.</typeparam>
            <param name="source">The source.</param>
            <param name="prop">The property.</param>
            <returns>Dictionary&lt;T, J&gt;.</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ContainsEquivalent(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Checks whether the given list of items contains the item or not, regardless of casing.
            </summary>
            <param name="items">List of items.</param>
            <param name="item">Item to check.</param>
            <returns>Returns <c>True</c>, if the list of items contains the item; otherwise returns <c>False</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Enumerates a sequence in chunks, yielding batches of a certain size to the enumerator.
            </summary>
            <typeparam name="T">The type of item in the batch.</typeparam>
            <param name="sequence">The sequence of items to be enumerated.</param>
            <param name="batchSize">The maximum number of items to include in a batch.</param>
            <returns>A sequence of arrays, with each array containing at most
            <paramref name="batchSize"/> elements.</returns>
        </member>
        <member name="T:System.Collections.Generic.GenericTypeExtensions">
            <summary>
            Extension methods for generic type T
            </summary>
        </member>
        <member name="M:System.Collections.Generic.GenericTypeExtensions.ChangeType``1(System.Object)">
            <summary>
            Changes the type of an object to a desired type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>T.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericTypeExtensions.IsNullOrDefault``1(``0)">
            <summary>
            Checks whether the given instance is <c>null</c> or empty.
            </summary>
            <typeparam name="T">Type of instance.</typeparam>
            <param name="instance">Instance to check.</param>
            <returns>Returns <c>True</c>, if the original instance is <c>null</c> or empty; otherwise returns <c>False</c>.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericTypeExtensions.ThrowIfNullOrDefault``1(``0)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the given instance is <c>null</c> or empty.
            </summary>
            <typeparam name="T">Type of instance.</typeparam>
            <param name="instance">Instance to check.</param>
            <returns>Returns the original instance, if the instance is NOT <c>null</c>; otherwise throws an <see cref="T:System.ArgumentNullException"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/></exception>
        </member>
        <member name="M:System.Collections.Generic.GenericTypeExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Take a sub-array from a given array.
            </summary>
            <typeparam name="T">Type of instance.</typeparam>
            <param name="data">Original array that the sub-array will be generated from.</param>
            <param name="index">Index to start the sub-array.</param>
            <param name="length">Number of elements to take from start index.</param>
            <returns>Type T sub-array.</returns>
        </member>
        <member name="M:System.Collections.Generic.GenericTypeExtensions.GetPropertyDescription``1(``0)">
            <summary>
            Builds a list of property descriptions for each public property on the object type T.
            </summary>
            <typeparam name="T">Instance of the object to gather properties (and values) from.</typeparam>
            <param name="obj">Object to gather properties from.</param>
            <returns>List of property description objects.</returns>
        </member>
        <member name="T:System.Collections.Generic.PropertyDescription">
            <summary>
            Class that describes a given object.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PropertyDescription.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Property descriptions can only be created within the Cloud.Core package, therefore the constructor is internal.
            </summary>
            <param name="propertyInfo">Information about the property being described.</param>
            <param name="value">The value of the property being described.</param>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.Type">
            <summary>
            Type of the object being described.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.Name">
            <summary>
            Name of the object being described.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.IsSystemType">
            <summary>
            Whether the object is a system type [true] or not [false].  System types are strings, bool, int etc.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.Value">
            <summary>
            Value of the object being described.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.IsEnumerable">
            <summary>
            Whether the object is an enumerable type.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.HasKeyAttribute">
            <summary>
            Whether the object has the "Key" attribute associated with it.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PropertyDescription.HasRequiredAttribute">
            <summary>
            Whether the object has the "Required", "JsonRequired" or "JsonProperty(Required=true)" attribute associated with it.
            </summary>
        </member>
        <member name="T:System.EnumExtensions">
            <summary>
            Contains methods that extend the enum struct with utility and mapping methods.
            </summary>
        </member>
        <member name="M:System.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the description attribute value associated with an enum value, or if not present
            returns the enum value ToString() value.
            </summary>
            <param name="value">The enum value we want to get the description from.</param>
            <returns>The value of the description attribute present in this enum value.</returns>
        </member>
        <member name="M:System.EnumExtensions.ListFromEnum``1(System.Boolean)">
            <summary>
            Converts enum of type T to list of KeyValuePair (string key, T value).
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="addSpacesToCapitals">bool flag for space</param>
            <returns>
            List of key value pairs (string, int) representing the passed in enum.
            </returns>
        </member>
        <member name="M:System.EnumExtensions.ConvertIntToEnum``1(System.Int32)">
            <summary>
            Convert Int to Enum
            </summary>
            <typeparam name="T">The generic object to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>Type T converted object.</returns>
        </member>
        <member name="M:System.EnumExtensions.ConvertStringToEnum``1(System.String)">
            <summary>
            Convert String to Enum
            </summary>
            <typeparam name="T">The generic object to convert to.</typeparam>
            <param name="value">The value.</param>
            <returns>Type T converted object.</returns>
        </member>
        <member name="M:System.EnumExtensions.ConvertToEnum``1(System.Object)">
            <summary>
            Convert to Enum
            </summary>
            <typeparam name="T">The generic object to convert to.</typeparam>
            <param name="value">The value.</param>
            <returns>Enum of type T.</returns>
            <exception cref="T:System.ArgumentException">T must be an enumeration type</exception>
        </member>
        <member name="T:System.Net.Http.Headers.HttpRequestHeadersExtensions">
            <summary>
            Extension methods for the HttpRequestHeaders.
            </summary>
        </member>
        <member name="M:System.Net.Http.Headers.HttpRequestHeadersExtensions.GetHeaderValue(System.Net.Http.Headers.HttpRequestHeaders,System.String,System.String)">
            <summary>
            Find a particular header from a request and return its value (as a semi-colon, delimited string).
            </summary>
            <param name="headers">Request headers to parse.</param>
            <param name="headerName">Name of header to find.</param>
            <param name="delimiter">The delimiter. Defaults to ";".</param>
            <returns>String version of the values collection, delimited by semi-colon.</returns>
        </member>
        <member name="M:System.IntExtensions.ToSizeSuffix(System.Int64,System.Int32)">
            <summary>
            Sizes the suffix.
            </summary>
            <param name="value">The value to convert (byte length).</param>
            <param name="decimalPlaces">The decimal places.</param>
            <returns>String representation of bytes with suffix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">decimalPlaces</exception>
        </member>
        <member name="M:System.LongExtensions.ToDateTime(System.Int64)">
            <summary>
            Converts from Epoch time (number of seconds since 1st Jan 1970)
            </summary>
            <param name="epochTime">Epoch time</param>
            <returns>DateTime representation of Epoch time</returns>
        </member>
        <member name="M:System.LongExtensions.ToEpochTime(System.DateTime)">
            <summary>
            Convert a DateTime to epoch.
            </summary>
            <param name="dt">DateTime to convert to an epoch time.</param>
            <returns>Double epoch representation of a datetime.</returns>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyToBytes(System.IO.Stream)">
            <summary>
            Reads the contents of a stream into a memory stream and converts to a byte array.
            </summary>
            <param name="input">The input.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            String Extension methods.
            </summary>
        </member>
        <member name="M:System.StringExtensions.RemoveNonAlphanumericCharacters(System.String)">
            <summary>
            Cleans the content of unnecessary characters using the regular expression "[\\W]{1,}".  Replaces with a space.
            </summary>
            <param name="text">The text content to clean.</param>
            <returns>Cleaned System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.RemoveMultiple(System.String,System.String[])">
            <summary>
            Removes multiple strings from the source string.
            </summary>
            <param name="str">The string to modify.</param>
            <param name="find">The string sequences to find and remove.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceMultiple(System.String,System.String,System.String[])">
            <summary>
            Replaces multiple strings with a replacement string.
            </summary>
            <param name="str">The string to modify.</param>
            <param name="replaceWith">The replace with string.</param>
            <param name="find">The string sequences to find and replace.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.MultiLine(System.String[])">
            <summary>
            Multiline string extension.
            </summary>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.SetDefaultIfNullOrEmpty(System.String,System.String)">
            <summary>
            Sets the default if null.
            </summary>
            <param name="str">The string to check.</param>
            <param name="default">The default value if null.</param>
            <returns>System.String returned.</returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceAll(System.String,System.Char[],System.String)">
            <summary>
            Replaces the specified separators.
            </summary>
            <param name="str">The string to perform replace on.</param>
            <param name="replaceChars">The chars to replace.</param>
            <param name="newVal">The new value.</param>
            <returns>string with characters replaced.</returns>
        </member>
        <member name="M:System.StringExtensions.GetSizeInBytes(System.String,System.Text.Encoding)">
            <summary>
            Gets the memory footprint (size) in bytes.
            </summary>
            <param name="str">The string to check length for.</param>
            <param name="encoding">The encoding of the string.</param>
            <returns>Long - length of string.</returns>
        </member>
        <member name="M:System.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether string is null or zero length.
            </summary>
            <param name="str">The string to check.</param>
            <returns>
              <c>true</c> if [is null or empty] [the specified string]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks whether the string value is either <c>null</c> or white space.
            </summary>
            <param name="value"><see cref="T:System.String"/> value to check.</param>
            <returns>Returns <c>True</c>, if the string value is either <c>null</c> or white space; otherwise returns <c>False</c>.</returns>
        </member>
        <member name="M:System.StringExtensions.ThrowIfNullOrWhiteSpace(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if the given value is <c>null</c> or white space.
            </summary>
            <param name="value">Value to check.</param>
            <returns>
            Returns the original value, if the value is NOT <c>null</c>; otherwise throws an <see cref="T:System.ArgumentNullException" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:System.StringExtensions.ThrowIfNull(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if the given value is <c>null</c>.
            </summary>
            <param name="value">Value to check.</param>
            <returns>
            Returns the original value, if the value is NOT <c>null</c>; otherwise throws an <see cref="T:System.ArgumentNullException" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:System.StringExtensions.AddSpaceBeforeCaps(System.String)">
            <summary>
            Adds the space before caps.
            </summary>
            <param name="str">The string.</param>
            <returns>
            String with spaces before caps
            </returns>
        </member>
        <member name="M:System.StringExtensions.ToGuid(System.String)">
            <summary>
            Attempt to convert string to guid.
            </summary>
            <param name="str">String to convert.</param>
            <returns><see cref="T:System.Guid" /> representing the string or empty <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:System.StringExtensions.IsEquivalentTo(System.String,System.String)">
            <summary>
            Checks whether the string value is equal to the comparer, regardless of casing.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="comparer">Comparing value.</param>
            <returns>
            Returns <c>True</c>, if the string value is equal to the comparer, regardless of casing; otherwise returns <c>False</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.ToInt32(System.String)">
            <summary>
            Converts the string value to <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">String value to convert.</param>
            <returns>Returns the <see cref="T:System.Int32"/> value converted.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <see langword="null"/></exception>
        </member>
        <member name="M:System.StringExtensions.ToBoolean(System.String)">
            <summary>
            Converts the string value to <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">String value to convert.</param>
            <returns>Returns the <see cref="T:System.Boolean"/> value converted.</returns>
        </member>
        <member name="M:System.StringExtensions.ContainsEquivalent(System.String,System.String)">
            <summary>
            Checks whether the given list of items contains the item or not, regardless of casing.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="comparer">Comparing value.</param>
            <returns>Returns <c>True</c>, if the string value contains the comparer, regardless of casing; otherwise returns <c>False</c>.</returns>
        </member>
        <member name="M:System.StringExtensions.StartsWithEquivalent(System.String,System.String)">
            <summary>
            Checks whether the string value starts with the comparer, regardless of casing.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="comparer">Comparing value.</param>
            <returns>
            Returns <c>True</c>, if the string value starts with the comparer, regardless of casing; otherwise returns <c>False</c>.
            </returns>
        </member>
        <member name="M:System.StringExtensions.EndsWithEquivalent(System.String,System.String)">
            <summary>
            Checks whether the string value ends with the comparer, regardless of casing.
            </summary>
            <param name="value">Value to compare.</param>
            <param name="comparer">Comparing value.</param>
            <returns>Returns <c>True</c>, if the string value ends with the comparer, regardless of casing; otherwise returns <c>False</c>.</returns>
        </member>
        <member name="M:System.StringExtensions.ConvertToStream(System.String,System.Text.Encoding)">
            <summary>
            Converts string to stream.
            </summary>
            <param name="value">The string value to convert.</param>
            <param name="encoding">The encoding of the string.</param>
            <returns>Stream version of string.</returns>
        </member>
        <member name="M:System.StringExtensions.ConvertToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts string to byte array.
            </summary>
            <param name="value">The string value to convert.</param>
            <param name="encoding">The encoding of the string.</param>
            <returns>Byte array version of string.</returns>
        </member>
        <member name="M:System.StringExtensions.ReadContents(System.IO.MemoryStream)">
            <summary>
            Reads the contents of a stream and returns the string.
            </summary>
            <param name="stream">The stream to convert from.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:System.StringExtensions.Substring(System.String,System.String,System.String)">
            <summary>
            Substrings the specified text using a start and finish search string.
            </summary>
            <param name="str">The string to substitute.</param>
            <param name="start">The start text to find.</param>
            <param name="end">The end text to find.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Extension methods for Type.
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsSystemType(System.Type)">
            <summary>
            Determines whether or not the type is a system type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>[true] if is a system type, otherwise [false].</returns>
        </member>
        <member name="M:System.TypeExtensions.IsEnumerableType(System.Type)">
            <summary>
            Determines whether the type can be enumerated.
            </summary>
            <param name="type">Type to check.</param>
            <returns>[true] if is a enumerable type, otherwise [false].</returns>
        </member>
        <member name="M:System.TypeExtensions.GetRequiredProperties(System.Type)">
            <summary>
            Get a list of properties with the required attribute.
            </summary>
            <param name="type">Type object to check properties.</param>
            <returns>List of required props.</returns>
        </member>
        <member name="M:System.TypeExtensions.IsRequiredProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the property info contains required attributes.
            Checks "Required", "JsonRequired" and "JsonProperty(Required)" attributes.
            </summary>
            <param name="prop">Property info to check.</param>
            <returns>True if contains a required attribute.</returns>
        </member>
    </members>
</doc>
